Git GitHub SourceTree
Git 是一个命令行工具，包括对代码分支和版本管理的一系列命令
GitHub 是一个存储代码资源的服务器，它还提供了一些简单的操作，可以在前端页面上完成，能够建立仓库和分支等，这些操作用Git命令都能实现
SourceTree 提供了对Git命令的，完整封装，用GUI方式呈现，能通过菜单和按钮就能完成
Git学习：
1.建立远程\本地仓库
2.建立非master分支
3.发布release版本，创建新tag
4.拉取某个分支到本地
5.本地分支跟踪远程分支
6.提交本地工作副本
7.推送本地修改到远程分支
8.抓取远程分支
9.merge远程分支到本地分支

(
初步：
如果不使用SourceTree，Git命令可以实现所有要求，首先git init命令会在当前工程目录下初始化新的Git工程，也会建立一个对应的新的Git仓库，即使已经有了工程代码，Git也能检测和添加到Git工程；
使用git status可以看到git工程目录下的跟踪和非跟踪的文件状态，包括工作目录和缓存中，用git add file_name能够跟踪没有被跟踪的文件，被跟踪的文件就会划定到缓存，之前，文件一直在工作目录下，包括没有被跟踪之前，或者跟踪之后，做出的新的修改；每次新修改之后，也要将修改从工作目录下，使用git add file_name命令,
将文件暂存到缓存区中，这也是一个操作，叫stage；而在没有stage之前，还可以用git diff来判断工作目录和缓存区文件之间的区别；
使用git commit -m "commit_message"命令，可以将缓存区的所有文件提交到本地仓库中；使用git log能够查看之前所有的提交记录；
)

(
进阶：
提交之后，继续修改Git工程，所做的修改都是在HEAD上做的修改，最后的一次提交叫做HEAD Commit；
回滚操作（将工作目录的文件，回滚到最后一次Commit），使用git checkout HEAD file_name；
多文件 暂存 和 提交，可以用file_name1...，如git add file_name_1 file_name_2；
舍弃暂存的修改（将缓存区的文件，回滚到最后一次Commit），使用git reset HEAD file_name；
回滚提交（改变Git的提交记录，回滚到之前某次提交，HEAD变为这次提交的Commit），使用git reset SHA_first_seven_codes；
)
(
再进阶：
使用git branch能够显示所有分支，并且＊开头的是当前所在分支； 
新建分支，使用git branch new_branch_name;
切换到某个分支，使用git checkout branch_name；
将a分支的全部内容包含到b分支中去，使用git merge other_branch；
如果，将b分支merge到a分支，出现两个分支同一个文件的同样的行被做了不同修改，会出现merege conflict，（注意：这里的不同的修改是在commit之后的状态），git会给出提示，并且不会做merge操作；
出现merge conflict之后，在当前分支，冲突的部分，回变成：
（
<<<<<<< HEAD
text in a_branch
=======
text in b_branch
>>>>>>> b_branch_name
）
需要选择留下，下面的即b分支的代码，或者选择保留a分支的代码；
这些都是在当前分支的工作副本中；
再次进行暂存和提交之后，git会给出confilict resolved的提示；
分支的删除，使用git branch -d branch_name
)
(
再再进阶：
remote：是一个共享的Git仓库，它允许不同位置的合作者，在同一个Git工程上操作；
将一个远程的仓库内容克隆到本地目录，可以使用git clone remote_location clone_name，remote_location是远程仓库的地址，clone_name是本地的目录,
（克隆之后，在这个目录下的修改只会影响到本地仓库，不会影响共享的工程）；
默认的远程仓库地址，Git使用origin来表示，使用git remote -v可以显示远程仓库列表，用简称origin表示，还显示了仓库的地址，如（git@github.com:zhangsong246/note.git (fetch)；
使用git fetch 能将远程目录（git clone的原地址下）的Git工程，抓取到本地，但是存放在一个新的分支下，新的分支用origin/开头；
紧接上一步，再使用git merge origin/some_branch就能将新抓取的分支，合并到当前分支下；
这样git log就能够将合作者的提交记录显示出来；
使用git push origin branch_name能够将本地分支，推送到远程地址，这里用origin简称；
)

（
自学习：
使用git config --global user.name "your_name"，能配置git签名中的name；
使用git config --global user.email "your_email"，能配置git签名中的email；
使用git log --oneline --decorate能够显示当前HEAD指针指向的版本镜像；

）
